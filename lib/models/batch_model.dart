import 'package:cloud_firestore/cloud_firestore.dart';

class Batch {
  final String id;
  final String ownerUid;
  final String receivedFromName;
  final double receivedAmount;
  final Timestamp? receivedDate;
  final String referenceNote;
  final int transactionCount;

  Batch({
    required this.id,
    required this.ownerUid,
    required this.receivedFromName,
    required this.receivedAmount,
    this.receivedDate,
    required this.referenceNote,
    required this.transactionCount,
  });

  // Converts a Batch object to a Firestore-compatible map.
  Map<String, dynamic> toFirestore() {
    return {
      'ownerUid': ownerUid,
      'receivedFromName': receivedFromName,
      'receivedAmount': receivedAmount,
      'receivedDate': receivedDate ?? FieldValue.serverTimestamp(),
      'referenceNote': referenceNote,
      'transactionCount': transactionCount,
    };
  }

  // Creates a Batch object from a Firestore document.
  factory Batch.fromFirestore(DocumentSnapshot doc) {
    Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
    return Batch(
      id: doc.id,
      ownerUid: data['ownerUid'] ?? '',
      receivedFromName: data['receivedFromName'] ?? '',
      receivedAmount: (data['receivedAmount'] ?? 0.0).toDouble(),
      receivedDate: data['receivedDate'] as Timestamp?,
      referenceNote: data['referenceNote'] ?? '',
      transactionCount: data['transactionCount'] ?? 0,
    );
  }

  // Creates a Batch object from a map (useful for new batches).
  factory Batch.fromMap(Map<String, dynamic> map) {
    return Batch(
      id: '', // ID is generated by Firestore, so it's empty initially.
      ownerUid: map['ownerUid'] ?? '',
      receivedFromName: map['receivedFromName'] ?? '',
      receivedAmount: (map['receivedAmount'] ?? 0.0).toDouble(),
      receivedDate: map['receivedDate'] as Timestamp?,
      referenceNote: map['referenceNote'] ?? '',
      transactionCount: map['transactionCount'] ?? 0,
    );
  }
}
